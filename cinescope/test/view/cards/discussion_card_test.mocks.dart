// Mocks generated by Mockito 5.4.0 from annotations
// in cinescope/test/view/cards/discussion_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:collection' as _i2;
import 'dart:ui' as _i8;

import 'package:cinescope/model/discussion.dart' as _i7;
import 'package:cinescope/model/profile.dart' as _i4;
import 'package:cinescope/model/providers/discussion_provider.dart' as _i6;
import 'package:cinescope/model/providers/profile_provider.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnmodifiableSetView_0<E> extends _i1.SmartFake
    implements _i2.UnmodifiableSetView<E> {
  _FakeUnmodifiableSetView_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_1<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfile_2 extends _i1.SmartFake implements _i4.Profile {
  _FakeProfile_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i5.NavigatorObserver {
  @override
  void didPush(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i5.Route<dynamic>? newRoute,
    _i5.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DiscussionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscussionProvider extends _i1.Mock
    implements _i6.DiscussionProvider {
  @override
  _i2.UnmodifiableSetView<_i7.Discussion> get userDiscussions =>
      (super.noSuchMethod(
        Invocation.getter(#userDiscussions),
        returnValue: _FakeUnmodifiableSetView_0<_i7.Discussion>(
          this,
          Invocation.getter(#userDiscussions),
        ),
        returnValueForMissingStub: _FakeUnmodifiableSetView_0<_i7.Discussion>(
          this,
          Invocation.getter(#userDiscussions),
        ),
      ) as _i2.UnmodifiableSetView<_i7.Discussion>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.Future<_i2.UnmodifiableSetView<_i7.Discussion>> getDiscussionsByFilmId(
          String? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscussionsByFilmId,
          [filmId],
        ),
        returnValue: _i3.Future<_i2.UnmodifiableSetView<_i7.Discussion>>.value(
            _FakeUnmodifiableSetView_0<_i7.Discussion>(
          this,
          Invocation.method(
            #getDiscussionsByFilmId,
            [filmId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.UnmodifiableSetView<_i7.Discussion>>.value(
                _FakeUnmodifiableSetView_0<_i7.Discussion>(
          this,
          Invocation.method(
            #getDiscussionsByFilmId,
            [filmId],
          ),
        )),
      ) as _i3.Future<_i2.UnmodifiableSetView<_i7.Discussion>>);
  @override
  _i3.Future<void> addNewDiscussion(_i7.Discussion? newDiscussion) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewDiscussion,
          [newDiscussion],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> addCommentToDiscussion(
    _i7.Discussion? discussion,
    _i7.Comment? newComment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommentToDiscussion,
          [
            discussion,
            newComment,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void rerender() => super.noSuchMethod(
        Invocation.method(
          #rerender,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ProfileProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileProvider extends _i1.Mock implements _i9.ProfileProvider {
  @override
  _i3.StreamController<bool> get loadedController => (super.noSuchMethod(
        Invocation.getter(#loadedController),
        returnValue: _FakeStreamController_1<bool>(
          this,
          Invocation.getter(#loadedController),
        ),
        returnValueForMissingStub: _FakeStreamController_1<bool>(
          this,
          Invocation.getter(#loadedController),
        ),
      ) as _i3.StreamController<bool>);
  @override
  bool get lastLoaded => (super.noSuchMethod(
        Invocation.getter(#lastLoaded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set lastLoaded(bool? _lastLoaded) => super.noSuchMethod(
        Invocation.setter(
          #lastLoaded,
          _lastLoaded,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<bool> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i3.Stream<bool>.empty(),
        returnValueForMissingStub: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
  @override
  set loaded(_i3.Stream<bool>? _loaded) => super.noSuchMethod(
        Invocation.setter(
          #loaded,
          _loaded,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Profile getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _FakeProfile_2(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeProfile_2(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        ),
      ) as _i4.Profile);
  @override
  _i3.Future<_i4.Profile> getProfileByUid({String? uid}) => (super.noSuchMethod(
        Invocation.method(
          #getProfileByUid,
          [],
          {#uid: uid},
        ),
        returnValue: _i3.Future<_i4.Profile>.value(_FakeProfile_2(
          this,
          Invocation.method(
            #getProfileByUid,
            [],
            {#uid: uid},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i4.Profile>.value(_FakeProfile_2(
          this,
          Invocation.method(
            #getProfileByUid,
            [],
            {#uid: uid},
          ),
        )),
      ) as _i3.Future<_i4.Profile>);
  @override
  _i3.Future<_i4.Profile> getProfileByUidReload({String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfileByUidReload,
          [],
          {#uid: uid},
        ),
        returnValue: _i3.Future<_i4.Profile>.value(_FakeProfile_2(
          this,
          Invocation.method(
            #getProfileByUidReload,
            [],
            {#uid: uid},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i4.Profile>.value(_FakeProfile_2(
          this,
          Invocation.method(
            #getProfileByUidReload,
            [],
            {#uid: uid},
          ),
        )),
      ) as _i3.Future<_i4.Profile>);
  @override
  _i3.Future<void> saveProfile(_i4.Profile? profile) => (super.noSuchMethod(
        Invocation.method(
          #saveProfile,
          [profile],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void rerender() => super.noSuchMethod(
        Invocation.method(
          #rerender,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
