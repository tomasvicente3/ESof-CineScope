// Mocks generated by Mockito 5.4.0 from annotations
// in cinescope/test/view/pages/discussions/discussion_page_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:collection' as _i2;
import 'dart:ui' as _i6;

import 'package:cinescope/model/discussion.dart' as _i4;
import 'package:cinescope/model/providers/discussion_provider.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnmodifiableSetView_0<E> extends _i1.SmartFake
    implements _i2.UnmodifiableSetView<E> {
  _FakeUnmodifiableSetView_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DiscussionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscussionProvider extends _i1.Mock
    implements _i3.DiscussionProvider {
  @override
  _i2.UnmodifiableSetView<_i4.Discussion> get userDiscussions =>
      (super.noSuchMethod(
        Invocation.getter(#userDiscussions),
        returnValue: _FakeUnmodifiableSetView_0<_i4.Discussion>(
          this,
          Invocation.getter(#userDiscussions),
        ),
        returnValueForMissingStub: _FakeUnmodifiableSetView_0<_i4.Discussion>(
          this,
          Invocation.getter(#userDiscussions),
        ),
      ) as _i2.UnmodifiableSetView<_i4.Discussion>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<_i2.UnmodifiableSetView<_i4.Discussion>> getDiscussionsByFilmId(
          String? filmId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscussionsByFilmId,
          [filmId],
        ),
        returnValue: _i5.Future<_i2.UnmodifiableSetView<_i4.Discussion>>.value(
            _FakeUnmodifiableSetView_0<_i4.Discussion>(
          this,
          Invocation.method(
            #getDiscussionsByFilmId,
            [filmId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.UnmodifiableSetView<_i4.Discussion>>.value(
                _FakeUnmodifiableSetView_0<_i4.Discussion>(
          this,
          Invocation.method(
            #getDiscussionsByFilmId,
            [filmId],
          ),
        )),
      ) as _i5.Future<_i2.UnmodifiableSetView<_i4.Discussion>>);
  @override
  _i5.Future<void> addNewDiscussion(_i4.Discussion? newDiscussion) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewDiscussion,
          [newDiscussion],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> addCommentToDiscussion(
    _i4.Discussion? discussion,
    _i4.Comment? newComment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommentToDiscussion,
          [
            discussion,
            newComment,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void rerender() => super.noSuchMethod(
        Invocation.method(
          #rerender,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i7.Route<dynamic>? newRoute,
    _i7.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
